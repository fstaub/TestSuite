(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input::Initialization:: *)
<<sarah4/SARAH.m


(* ::Input::Initialization:: *)
Start["SM"]


(* ::Input::Initialization:: *)
CalcRGEs[TwoLoop->True]


(* ::Input::Initialization:: *)
Clear[i1];


(* ::Input::Initialization:: *)
y2s=3 trace[Adj[Yu],Yu]+ 3 trace[Adj[Yd],Yd] + trace[Adj[Ye],Ye];
y4s=(17/20 g1^2 + 9/4 g2^2 + 8 g3^2) trace[Adj[Yu],Yu] + (1/4 g1^2 + 9/4 g2^2 + 8 g3^2) trace[Adj[Yd],Yd] + 3/4(g1^2 + g2^2) trace[Adj[Ye],Ye];
hs = 3trace[Adj[Yu],Yu,Adj[Yu],Yu] + 3 trace[Adj[Yd],Yd,Adj[Yd],Yd] + trace[Adj[Ye],Ye,Adj[Ye],Ye];
chi4s = 9/4(3 trace[Adj[Yu],Yu,Adj[Yu],Yu] + 3 trace[Adj[Yd],Yd,Adj[Yd],Yd] + trace[Adj[Ye],Ye,Adj[Ye],Ye] - 1/3 trace[Adj[Yu],Yu,Adj[Yd],Yd]-1/3 trace[Adj[Yd],Yd,Adj[Yu],Yu]);


(* ::Input::Initialization:: *)
Yu1Loop=3/2(MatMul[Yu,Adj[Yu],Yu][i1,i2]-MatMul[Yu,Adj[Yd],Yd][i1,i2])+y2s Yu[i1,i2] - (17/20 g1^2 + 9/4 g2^2 + 8 g3^2) Yu[i1,i2];
Yd1Loop=3/2(MatMul[Yd,Adj[Yd],Yd][i1,i2]-MatMul[Yd,Adj[Yu],Yu][i1,i2])+y2s Yd[i1,i2]- (1/4 g1^2 + 9/4 g2^2 + 8 g3^2) Yd[i1,i2];
Ye1Loop=3/2(MatMul[Ye,Adj[Ye],Ye][i1,i2])+y2s Ye[i1,i2] - 9/4( g1^2 +g2^2) Ye[i1,i2];
Yu2Loop=3/2MatMul[Yu,Adj[Yu],Yu,Adj[Yu],Yu][i1,i2] -MatMul[Yu,Adj[Yu],Yu,Adj[Yd],Yd][i1,i2] - 1/4 MatMul[Yu,Adj[Yd],Yd,Adj[Yu],Yu][i1,i2]+11/4 MatMul[Yu,Adj[Yd],Yd,Adj[Yd],Yd][i1,i2] + y2s(5/4 MatMul[Yu, Adj[Yd],Yd][i1,i2]-9/4 MatMul[Yu,Adj[Yu],Yu][i1,i2])-chi4s Yu[i1,i2] + 3/2 \[Lambda]^2 Yu[i1,i2]-6 \[Lambda] MatMul[Yu,Adj[Yu],Yu][i1,i2]+5/2 y4s Yu[i1,i2]+MatMul[Yu,Adj[Yu],Yu][i1,i2](223/80 g1^2 + 135/16 g2^2 + 16 g3^2) - MatMul[Yu,Adj[Yd],Yd][i1,i2](43/80 g1^2 - 9/16 g2^2 + 16 g3^2) + Yu[i1,i2]((9/200 + 29/45 nG) g1^4 - 9/20 g1^2 g2^2 + 19/15 g1^2 g3^2 - (35/4 - nG) g2^4 + 9 g2^2 g3^2 - (404/3 - 80/9 nG) g3^4);
Yd2Loop=3/2MatMul[Yd,Adj[Yd],Yd,Adj[Yd],Yd][i1,i2] -MatMul[Yd,Adj[Yd],Yd,Adj[Yu],Yu][i1,i2] - 1/4 MatMul[Yd,Adj[Yu],Yu,Adj[Yd],Yd][i1,i2]+11/4 MatMul[Yd,Adj[Yu],Yu,Adj[Yu],Yu][i1,i2] + y2s(5/4 MatMul[Yd, Adj[Yu],Yu][i1,i2]-9/4 MatMul[Yd,Adj[Yd],Yd][i1,i2])-chi4s Yd[i1,i2] + 3/2 \[Lambda]^2 Yd[i1,i2]-6 \[Lambda] MatMul[Yd,Adj[Yd],Yd][i1,i2]+5/2 y4s Yd[i1,i2]+MatMul[Yd,Adj[Yd],Yd][i1,i2](187/80 g1^2 + 135/16 g2^2 + 16 g3^2) - MatMul[Yd,Adj[Yu],Yu][i1,i2](79/80 g1^2 - 9/16 g2^2 + 16 g3^2) + Yd[i1,i2](-(29/200 +1/45 nG) g1^4 -27/20 g1^2 g2^2 +31/15 g1^2 g3^2 - (35/4 - nG) g2^4 + 9 g2^2 g3^2 - (404/3 - 80/9 nG) g3^4);
Ye2Loop=3/2MatMul[Ye,Adj[Ye],Ye,Adj[Ye],Ye][i1,i2] + y2s(-9/4 MatMul[Ye, Adj[Ye],Ye][i1,i2])-chi4s Ye[i1,i2] + 3/2 \[Lambda]^2 Ye[i1,i2]-6 \[Lambda] MatMul[Ye,Adj[Ye],Ye][i1,i2]+5/2 y4s Ye[i1,i2]+MatMul[Ye,Adj[Ye],Ye][i1,i2](387/80 g1^2 + 135/16 g2^2 ) +Ye[i1,i2]((51/200 + 11/5 nG) g1^4 + 27/20 g1^2 g2^2  - (35/4 - nG) g2^4 );
Mu1Loop=Mu2*(6 \[Lambda] + 2 y2s - 9/10 g1^2 - 9/2 g2^2);
Mu2Loop=Mu2*(-15 \[Lambda]^2 - 12 \[Lambda] y2s - 9/2 hs - 21 trace[Adj[Yu],Yu,Adj[Yd],Yd] + (36/5 g1^2 + 36 g2^2) \[Lambda] + 5 y4s + (nG + 471/400) g1^4 + 9/8 g1^2 g2^2 + (5 nG - 385/16) g2^4);
Lambda1Loop=12 \[Lambda]^2 - (9/5 g1^2 + 9 g2^2) \[Lambda] + (27/100 g1^4 + 9/10 g1^2 g2^2 + 9/4 g2^4) + 4 y2s \[Lambda] - 4hs;
Lambda2Loop=-78 \[Lambda]^3 + (54 g2^2 + 54/5 g1^2) \[Lambda]^2 - ((313/8 - 10 nG) g2^4 - 117/20 g2^2 g1^2 - (687/200 + 2 nG) g1^4)\[Lambda] + (497/8 - 8 nG) g2^6 - (97/40 + 8/5 nG) g2^4 g1^2 - (717/200+ 8/5 nG) g2^2 g1^4 - (531/1000 + 24/25 nG) g1^6 - 64 g3^2 (trace[Adj[Yu],Yu,Adj[Yu],Yu] + trace[Adj[Yd],Yd,Adj[Yd],Yd]) - 8/5 g1^2 (2trace[Adj[Yu],Yu,Adj[Yu],Yu] - trace[Adj[Yd],Yd,Adj[Yd],Yd] + 3 trace[Adj[Ye],Ye,Adj[Ye],Ye]) - 3/2 g2^4 y2s + g1^2((63/5 g2^2 - 171/50 g1^2) trace[Adj[Yu],Yu] + (27/5 g2^2 + 9/10 g1^2) trace[Adj[Yd],Yd] + (33/5 g2^2 - 9/2 g1^2) trace[Adj[Ye],Ye]) + 10 \[Lambda] y4s - 24 \[Lambda] ^2 y2s - \[Lambda] hs - 42 \[Lambda] trace[Adj[Yu],Yu,Adj[Yd],Yd] + 20 (3 trace[Adj[Yu],Yu,Adj[Yu],Yu,Adj[Yu],Yu]+ 3 trace[Adj[Yd],Yd,Adj[Yd],Yd,Adj[Yd],Yd] + trace[Adj[Ye],Ye,Adj[Ye],Ye,Adj[Ye],Ye]) - 12 (trace[Adj[Yu],Yu,Adj[Yu],Yu,Adj[Yd],Yd]+trace[Adj[Yu],Yu,Adj[Yd],Yd,Adj[Yd],Yd] );


(* ::Input::Initialization:: *)
outRGEs=OpenWrite["SM_RGEs_debug.txt"];


(* ::Input::Initialization:: *)
Simplify[(Yu1Loop-BetaYijk[[1,2]]) /.trace[Adj[a_], b___]->trace[b,Adj[a]]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Yu_1L correct \n"];,
WriteString[outRGEs,"Yu_1L error \n"];
];


(* ::Input::Initialization:: *)
Expand[Simplify[(Yu2Loop-BetaYijk[[1,3]]) /. nG->3 /.trace[Adj[a_], b___]->trace[b,Adj[a]]]] /. trace[a__,Adj[Yd],b___,Adj[Yu]]->trace[b,Adj[Yu],a,Adj[Yd]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Yu_2L correct \n"];,
WriteString[outRGEs,"Yu_2L error \n"];
];


(* ::Input::Initialization:: *)
Simplify[(Yd1Loop-BetaYijk[[2,2]]) /. i1-> gen1 /. i2->gen2/. trace[Adj[a_], b___]->trace[b,Adj[a]]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Yd_1L correct \n"];,
WriteString[outRGEs,"Yd_1L error \n"];
];


(* ::Input::Initialization:: *)
Simplify[Expand[Simplify[(Yd2Loop-BetaYijk[[2,3]]) /. nG->3 /. trace[Adj[a_], b___]->trace[b,Adj[a]]]]/.trace[a__,Adj[Yd],b___,Adj[Yu]]->trace[b,Adj[Yu],a,Adj[Yd]]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Yd_2L correct \n"];,
WriteString[outRGEs,"Yd_2L error \n"];
];


(* ::Input::Initialization:: *)
Simplify[Simplify[(Ye1Loop-BetaYijk[[3,2]]) /. i1-> gen1 /. i2->gen2/. trace[Adj[a_], b___]->trace[b,Adj[a]]]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Ye_1L correct \n"];,
WriteString[outRGEs,"Ye_1L error \n"];
];


(* ::Input::Initialization:: *)
Expand[Simplify[(Ye2Loop-BetaYijk[[3,3]]) /. nG->3 /. i1-> gen1 /. i2->gen2/. trace[Adj[a_], b___]->trace[b,Adj[a]]]/. trace[Adj[a_], b___]->trace[b,Adj[a]]]/.trace[a__,Adj[Yd],b___,Adj[Yu]]->trace[b,Adj[Yu],a,Adj[Yd]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Ye_2L correct \n"];,
WriteString[outRGEs,"Ye_2L error \n"];
];


(* ::Input::Initialization:: *)
Simplify[BetaBij[[1,2]]-Mu1Loop /.Mu2->mu2 /. trace[Adj[a_], b___]->trace[b,Adj[a]]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Mu_1L correct \n"];,
WriteString[outRGEs,"Mu_1L error \n"];
];


(* ::Input::Initialization:: *)
Simplify[(BetaBij[[1,3]]-Mu2Loop) /.mu2->Mu2/. nG->3/. trace[Adj[a_], b___]->trace[b,Adj[a]]] /. trace[a__,Adj[Yd],b___,Adj[Yu]]->trace[b,Adj[Yu],a,Adj[Yd]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Mu_2L correct \n"];,
WriteString[outRGEs,"Mu_2L error \n"];
];


(* ::Input::Initialization:: *)
Simplify[(Lambda1Loop-BetaLijkl[[1,2]])/. nG->3 /. trace[Adj[a_], b___]->trace[b,Adj[a]]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Lambda_1L correct \n"];,
WriteString[outRGEs,"Lambda_1L error \n"];
];


(* ::Input::Initialization:: *)
Expand[Simplify[(Lambda2Loop-BetaLijkl[[1,3]])/. nG->3 /. trace[Adj[a_], b___]->trace[b,Adj[a]]]]  /. trace[a__,Adj[Yd],b___,Adj[Yu]]->trace[b,Adj[Yu],a,Adj[Yd]]/. trace[Yd,Adj[Yd],Yd,Adj[Yu],Yu,Adj[Yd]]->trace[Yd,Adj[Yu],Yu,Adj[Yd],Yd,Adj[Yd]]


(* ::Input::Initialization:: *)
If[%===0,
WriteString[outRGEs,"Lambda_2L correct \n"];,
WriteString[outRGEs,"Lambda_2L error \n"];
];


(* ::Input::Initialization:: *)
Close[outRGEs];
